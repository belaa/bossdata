#!/usr/bin/env python

from __future__ import division,print_function

from jinja2 import Environment, FileSystemLoader

import argparse
import os
import stat
import fileinput

package_name = 'bossdata'

def main():
    # Initialize and parse command-line arguments.
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--verbose', action = 'store_true',
        help = 'Provide verbose output.')
    parser.add_argument('--script', type = str, default = None, metavar = 'NAME',
        help = 'Create a new executable script file.')
    parser.add_argument('--module', type = str, default = None, metavar = 'NAME',
        help = 'Create a new {} module file.'.format(package_name))
    args = parser.parse_args()

    env = Environment(loader = FileSystemLoader('.templates'))

    if args.module:
        # Write out a skeleton module file.
        output_name = '{}/{}.py'.format(package_name,args.module)
        if args.verbose:
            print('Writing {}.'.format(output_name))
        env.get_template('module.py').stream(package = package_name,module = args.module).dump(output_name)
        # Add the new module into the API docs.
        output_name = 'docs/src/{}.{}.rst'.format(package_name,args.module)
        if args.verbose:
            print('Writing {}.'.format(output_name))
        env.get_template('module.rst').stream(package = package_name,module = args.module).dump(output_name)
        # Append the new module documentation to the API docs.
        api_docs = 'docs/src/{}.rst'.format(package_name)
        if args.verbose:
            print('Appending {}.{} to {}.'.format(package_name,args.module,api_docs))
        in_toc = False
        for line in fileinput.input(api_docs,inplace = 1):
            if line.startswith('.. toctree::'):
                in_toc = True
            elif in_toc and line.strip() == '':
                print('    {}.{}'.format(package_name,args.module))
                in_toc = False
            print(line,end='')

    if args.script:
        output_name = 'bin/{}'.format(args.script)
        if args.verbose:
            print('Writing {}.'.format(output_name))
        env.get_template('script.py').stream(name = args.script).dump(output_name)
        # Add the execute permission bit
        if args.verbose:
            print('Setting the executable permission bit.')
        file_stat = os.stat(output_name)
        os.chmod(output_name,file_stat.st_mode | stat.S_IEXEC)

if __name__ == '__main__':
    main()
